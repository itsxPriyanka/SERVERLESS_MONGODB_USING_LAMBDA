# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: spaceenergysystem
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-mongo-atlas




provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 128
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true



functions:
  createUser:
    handler: src/handlers/createUser.handler
    events:
      - httpApi:
          path: /users
          method: POST


  getUser:
    handler: src/handlers/getUser.handler
    events:
      - httpApi:
          path: /users/{email}
          method: GET


  getAll:
    handler: src/handlers/getAll.handler
    events:
      - httpApi:
          path: /users
          method: GET



  updateUser:
    handler: src/handlers/updateUser.handler
    events:
      - httpApi:
          path: /users/{email}
          method: PUT





  deleteUser:
    handler: src/handlers/deleteUser.handler
    events:
      - httpApi:
          path: /users/{email}
          method: DELETE





plugins:
  - serverless-dotenv-plugin
  - serverless-offline



















# provider:
#   name: aws
#   runtime: nodejs20.x
#   memorySize: 128
#   region: ap-south-1
#   stage: ${opt:stage, 'dev'}
#   httpApi:
#     cors: true
#   environment:
#     JWT_SECRET: ${env:JWT_SECRET}




# functions:
#   createUser:
#     handler: src/handlers/createUser.handler
#     events:
#       - httpApi:
#           path: /users
#           method: POST
#           authorizer:
#             name: jwtAuthorizer
#             identitySource: $request.header.Authorization





#   getUser:
#     handler: src/handlers/getUser.handler
#     events:
#       - httpApi:
#           path: /users/{email}
#           method: GET
#           authorizer:
#             name: jwtAuthorizer
#             identitySource: $request.header.Authorization





#   getAll:
#     handler: src/handlers/getAll.handler
#     events:
#       - httpApi:
#           path: /users
#           method: GET
#           authorizer:
#             name: jwtAuthorizer
#             identitySource: $request.header.Authorization





#   updateUser:
#     handler: src/handlers/updateUser.handler
#     events:
#       - httpApi:
#           path: /users/{email}
#           method: PUT
#           authorizer:
#             name: jwtAuthorizer
#             identitySource: $request.header.Authorization





#   deleteUser:
#     handler: src/handlers/deleteUser.handler
#     events:
#       - httpApi:
#           path: /users/{email}
#           method: DELETE
#           authorizer:
#             name: jwtAuthorizer
#             identitySource: $request.header.Authorization





#   jwtAuthorizer:
#     handler: src/handlers/jwtAuthorizer.handler




# plugins:
#    - serverless-dotenv-plugin
#    - serverless-offline
#    - serverless-reqvalidator-plugin


   
